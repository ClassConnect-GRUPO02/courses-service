generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Course {
  id                String       @id
  name              String
  description       String
  shortDescription  String
  startDate         DateTime
  endDate           DateTime
  capacity          Int
  enrolled          Int
  category          String
  level             String
  modality          String
  prerequisites     String // Se guarda como "js,html,css"
  imageUrl          String
  creatorId         String
  modules           Module[]
  enrollments       Enrollment[]
  instructors       CourseInstructor[]
  tasks             Task[]
  feedback          CourseFeedback[]
  student_feedback  StudentFeedback[]
  favorites         FavoriteCourse[] 
  course_activity_log CourseActivityLog[]
}

model Module {
  id          String @id
  name        String
  description String
  url         String
  order       Int
  course      Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  resources   Resource[]
}

model Enrollment {
  id             String   @id
  userId         String
  course         Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId       String
  enrollmentDate DateTime

  @@map("course_student")
}

model CourseInstructor {
  id       String   @id @default(uuid())
  course   Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String
  userId   String
  type     InstructorType

  can_create_content     Boolean @default(false)
  can_grade              Boolean @default(false)
  can_update_course      Boolean @default(false)

  @@unique([courseId, userId]) // para que no se repita el mismo instructor en un curso
  @@map("courses_instructors")
}

// Enum para los tipos de instructor
enum InstructorType {
  TITULAR
  AUXILIAR
}

model Task {
  id                 String          @id @default(uuid())
  course_id          String
  created_by         String
  type               TaskType
  title              String
  description        String
  file_url           String?
  due_date           DateTime
  allow_late         Boolean
  late_policy        LatePolicy
  has_timer          Boolean
  time_limit_minutes Int?
  published          Boolean
  visible_from       DateTime?
  visible_until      DateTime?
  allow_file_upload  Boolean
  answer_format      AnswerFormat
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  deleted_at         DateTime?

  course             Course          @relation(fields: [course_id], references: [id], onDelete: Cascade)
  submissions        TaskSubmission[]
  questions          TaskQuestion[]

  @@map("tasks")
}

enum TaskType {
  tarea
  examen
}

enum LatePolicy {
  ninguna
  descontar
  penalizar
  aceptar
  aceptar_con_descuento
  aceptar_con_penalizacion
}

enum AnswerFormat {
  preguntas_respuestas
  archivo
}

model TaskQuestion {
  id        String     @id @default(uuid())
  task_id   String
  text      String     @db.Text
  task      Task       @relation(fields: [task_id], references: [id], onDelete: Cascade)
  answers   StudentAnswer[]

  @@map("task_question")
}

model Resource {
  id          String   @id @default(uuid())
  description String
  type        String
  url         String
  order       Int
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@map("resources")
}

model TaskSubmission {
  id            String           @id @default(uuid())
  task_id       String
  student_id    String
  submitted_at  DateTime
  status        SubmissionStatus
  grade         Float?
  feedback      String?          @db.Text
  file_url      String?
  time_spent    Int?
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt

  task          Task             @relation(fields: [task_id], references: [id], onDelete: Cascade)
  answers       StudentAnswer[]

  @@unique([task_id, student_id])
  @@map("task_submission")
}

enum SubmissionStatus {
  submitted
  late
}

model StudentAnswer {
  id              String     @id @default(uuid())
  submission_id   String
  question_id     String
  answer_text     String?    // Para respuestas tipo texto
  selected_option_id String? // Para opción múltiple

  submission      TaskSubmission @relation(fields: [submission_id], references: [id], onDelete: Cascade)
  question        TaskQuestion   @relation(fields: [question_id], references: [id], onDelete: Cascade)

  @@map("student_answer")
}

model CourseFeedback {
  id          String   @id @default(uuid())
  course_id   String
  student_id  String
  comment     String
  punctuation Float

  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@unique([course_id, student_id]) // un usuario solo puede comentar una vez por curso
  @@map("course_feedback")
}

model StudentFeedback {
  id          String   @id @default(uuid())
  course_id   String
  student_id  String
  instructor_id String
  comment     String
  punctuation Float

  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@unique([course_id, student_id])
  @@map("student_feedback")
}

model FavoriteCourse {
  id          String   @id @default(uuid())
  course_id   String
  student_id  String

  course Course @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@unique([course_id, student_id])
  @@map("favorite_courses")  
}

model CourseActivityLog {
  id           String   @id @default(uuid())
  course_id    String
  user_id      String
  action       String   // 'task_created', 'feedback_given', etc.
  metadata     Json?    // Información adicional como ID de la tarea, comentario, etc.
  created_at   DateTime @default(now())

  course       Course   @relation(fields: [course_id], references: [id], onDelete: Cascade)

  @@map("course_activity_log")
}
