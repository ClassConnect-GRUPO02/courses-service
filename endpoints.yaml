openapi: 3.0.0
info:
  title: ClassConnect Courses Service API
  version: 1.0.0

paths:

  /courses:
    post:
      summary: Create a new course
      tags:
        - Courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseRequest'
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Course'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Retrieve all courses
      tags:
        - Courses      
      responses:
        '200':
          description: A list of courses
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'

  /courses/{id}:
    get:
      summary: Retrieve a course by ID
      tags:
        - Courses      
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Course retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Course'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      summary: Delete a course by ID
      tags:
        - Courses      
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Course deleted successfully
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    patch:
      summary: Update a course by ID
      tags:
        - Courses
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseRequest'
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Course'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized – Missing or invalid JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing or invalid token"
        '403':
          description: Forbidden – User does not have permission to perform this action
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access denied"
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  /courses/{id}/modules:
    post:
      summary: Create a new module for a course
      tags:
        - Modules
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateModuleRequest'
      responses:
        '201':
          description: Module created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Module'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized – Missing or invalid JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing or invalid token"
        '403':
          description: Forbidden – User does not have permission to perform this action
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access denied"
    
    get:
      summary: Retrieve all modules for a course
      tags:
        - Modules
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of modules
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Module'
  
  /courses/{id}/modules/order: #Falta definir mejor
    patch:
      summary: Update the order of modules for a course
      tags:
        - Modules
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderedModuleIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Order updated successfully
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      
  /courses/{id}/modules/{moduleId}:
    get:
      summary: Retrieve a module by ID
      tags:
        - Modules
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: moduleId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Module retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Module'
        '404':
          description: Module not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
    delete:
      summary: Delete a module by ID
      tags:
        - Modules
      security:
        - bearerAuth: []   
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: moduleId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Module deleted successfully
        '401':
          description: Unauthorized – Missing or invalid JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing or invalid token"
        '403':
          description: Forbidden – User does not have permission to perform this action
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access denied"
        '404':
          description: Module not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update a module by ID
      tags:
        - Modules
      security:
        - bearerAuth: []      
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: moduleId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Module'
      responses:
        '200':
          description: Module updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Module'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized – Missing or invalid JWT
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing or invalid token"
        '403':
          description: Forbidden – User does not have permission to perform this action
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access denied"
        '404':
          description: Module not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /courses/{id}/enrollments:
    post:
      summary: Enroll a user in a course
      tags:
        - Enrollment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEnrollmentRequest'
      responses:
        '201':
          description: Enrollment created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Enrollment'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get all enrollments by course ID
      tags:
        - Enrollment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Enrollments for course retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Enrollment'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /courses/{id}/enrollments/{userId}:
    get:
      summary: Check if a user is enrolled in a course
      tags:
        - Enrollment
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Enrollment status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  isEnrolled:
                    type: boolean
        '404':
          description: Course or user not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /users/{userId}/courses:
    get:
      summary: Retrieve all courses for a user
      tags:
        - Enrollment
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of courses for the user
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Course'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /courses/{id}/instructors/{instructorId}:
    get:
      summary: Check if a user is an instructor in a course
      description: Returns whether the given instructorId is assigned as an instructor to the specified course.
      tags:
        - Instructors
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the course
          schema:
            type: string
        - name: instructorId
          in: path
          required: true
          description: The ID of the instructor (user)
          schema:
            type: string
      responses:
        '200':
          description: Whether the user is an instructor of the course
          content:
            application/json:
              schema:
                type: object
                properties:
                  isInstructor:
                    type: boolean
                    example: true
        '404':
          description: Course not found
        '500':
          description: Server error
  
  /instructors/{instructorId}/tasks:
    get:
      summary: List tasks created by an instructor with pagination
      tags:
        - Instructors
      parameters:
        - in: path
          name: instructorId
          required: true
          schema:
            type: string
          description: The ID of the instructor
        - in: query
          name: page
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number for pagination
        - in: query
          name: pageSize
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of tasks per page
      responses:
        '200':
          description: List of tasks created by the instructor with pagination info
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of tasks by the instructor
                    example: 50
                  page:
                    type: integer
                    description: Current page number
                    example: 1
                  pageSize:
                    type: integer
                    description: Number of tasks per page
                    example: 10
                  totalPages:
                    type: integer
                    description: Total number of pages
                    example: 5
                  data:
                    type: array
                    description: Array of task objects
                    items:
                      $ref: '#/components/schemas/TaskSummary'
        '400':
          description: Bad request, invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Instructor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /courses/{id}/instructors/{auxiliarId}:
    post:
      summary: Add an auxiliary instructor to a course
      tags:
        - Instructors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the course
        - in: path
          name: auxiliarId
          required: true
          schema:
            type: string
          description: ID of the auxiliary instructor to add
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - titularId
                - can_create_content
                - can_grade
                - can_update_course
              properties:
                titularId:
                  type: string
                  description: ID of the titular instructor authorizing the addition
                can_create_content:
                  type: boolean
                  description: Permission to create content
                can_grade:
                  type: boolean
                  description: Permission to grade submissions
                can_update_course:
                  type: boolean
                  description: Permission to update course settings
      responses:
        '201':
          description: Auxiliary instructor added successfully
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          description: Bad request, invalid input or missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found or titular instructor not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Remove an auxiliary instructor from a course
      tags:
        - Instructors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the course
        - in: path
          name: auxiliarId
          required: true
          schema:
            type: string
          description: ID of the auxiliary instructor to remove
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - titularId
              properties:
                titularId:
                  type: string
                  description: ID of the titular instructor authorizing the removal
      responses:
        '200':
          description: Auxiliary instructor removed successfully
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          description: Bad request or invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course or instructor not found, or titular instructor not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized (titularId is not titular or missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      summary: Update permissions for an auxiliary instructor in a course
      tags:
        - Instructors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the course
        - in: path
          name: auxiliarId
          required: true
          schema:
            type: string
          description: ID of the auxiliary instructor to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - titularId
                - can_create_content
                - can_grade
                - can_update_course
              properties:
                titularId:
                  type: string
                  description: ID of the titular instructor authorizing the update
                can_create_content:
                  type: boolean
                  description: Permission to create content
                can_grade:
                  type: boolean
                  description: Permission to grade tasks
                can_update_course:
                  type: boolean
                  description: Permission to update course details
      responses:
        '200':
          description: Instructor permissions updated successfully
          content:
            application/json:
              schema:
                type: boolean
                example: true
        '400':
          description: Bad request or invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Not authorized (titularId is not titular or missing)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course or instructor not found, or titular instructor not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /courses/{id}/instructors/{instructorId}/permissions:
    get:
      summary: Get instructor permissions in a course
      description: Retrieves the permission flags for an instructor within a specific course.
      tags:
        - Instructors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the course
        - in: path
          name: instructorId
          required: true
          schema:
            type: string
          description: ID of the instructor
      responses:
        '200':
          description: Instructor permissions retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  courseId:
                    type: string
                  userId:
                    type: string
                  type:
                    $ref: '#/components/schemas/InstructorType'
                  can_create_content:
                    type: boolean
                    example: true
                  can_grade:
                    type: boolean
                    example: false
                  can_update_course:
                    type: boolean
                    example: true
        '404':
          description: Course or instructor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse' 

  /courses/{id}/instructors:
    get:
      summary: Get all instructors by course ID
      description: Retrieves all instructors (titular and auxiliares) assigned to a specific course.
      tags:
        - Instructors
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the course
      responses:
        '200':
          description: Instructors retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Instructor'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /instructors/{instructorId}/courses:
    get:
      summary: Get all courses by instructor ID
      description: Retrieves all course IDs where the given instructor is assigned.
      tags:
        - Instructors
      parameters:
        - in: path
          name: instructorId
          required: true
          schema:
            type: string
          description: ID of the instructor
      responses:
        '200':
          description: Courses retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: string
                      example: "course123"
        '404':
          description: Instructor not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /courses/{id}/tasks:
    post:
      summary: Add a new task to a course
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Course ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (missing or invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get all tasks from a course
      description: Retrieves all tasks associated with a specific course, including any related questions.
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the course
      responses:
        '200':
          description: List of tasks for the course retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '400':
          description: Invalid course ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /courses/{id}/tasks/{taskId}:
    patch:
      summary: Update an existing task in a course
      description: Updates a task's data by ID within a specific course. Requires instructor authentication via JWT.
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the course
        - in: path
          name: taskId
          required: true
          schema:
            type: string
          description: The ID of the task to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Task'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Task'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - missing or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Course or Task not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a task from a course
      description: Deletes a task identified by taskId from the specified course. Requires authentication.
      tags:
        - Tasks
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The ID of the course
        - in: path
          name: taskId
          required: true
          schema:
            type: string
          description: The ID of the task to be deleted
      responses:
        '204':
          description: Task successfully deleted, no content returned
        '400':
          description: Invalid course or task ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - missing or invalid JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - instructor is not authorized to delete this task
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Task or course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      summary: Get a specific task from a course
      description: Retrieves a task by its ID inside the given course, including its questions.
      tags:
        - Tasks
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the course
        - in: path
          name: taskId
          required: true
          schema:
            type: string
          description: ID of the task
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Task'
        '404':
          description: Task or course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    
  /tasks/students/{studentId}:
    get:
      summary: Get all published tasks for a student
      description: Retrieves all published tasks for a student based on their enrolled courses.
      tags:
        - Tasks
      parameters:
        - in: path
          name: studentId
          required: true
          schema:
            type: string
          description: The ID of the student
      responses:
        '200':
          description: List of tasks assigned to the student
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
        '404':
          description: Student not found or no tasks available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


















  /modules/{moduleId}/resources:
    post:
      summary: Create a new resource for a module
      parameters:
        - in: path
          name: moduleId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceRequest'
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Resource'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    get:
      summary: Retrieve all resources for a module
      parameters:
        - in: path
          name: moduleId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of resources for the module
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Resource'
  
  /modules/{moduleId}/resources/{resourceId}:
    delete:
      summary: Delete a resource by ID
      parameters:
        - in: path
          name: moduleId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Resource deleted successfully
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
    patch:
      summary: Update a resource by ID
      parameters:
        - in: path
          name: moduleId
          required: true
          schema:
            type: string
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Resource'
      responses:
        '200':
          description: Resource updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Resource'
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Resource not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  
  /modules/{moduleId}/resources/order:
    patch:
      summary: Update the order of resources for a module
      parameters:
        - in: path
          name: moduleId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                orderedResourceIds:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: Order updated successfully
        '400':
          description: Bad request error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  

components:
  schemas:
    Course:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        capacity:
          type: integer
        enrolled:
          type: integer
        category:
          type: string
        level:
          type: string
        modality:
          type: string
        prerequisites:
          type: array
          items:
            type: string
        imageUrl:
          type: string
        creatorId:
          type: string

    CreateCourseRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        capacity:
          type: integer
        enrolled:
          type: integer
        category:
          type: string
        level:
          type: string
        modality:
          type: string
        prerequisites:
          type: array
          items:
            type: string
        imageUrl:
          type: string
        creatorId:
          type: string

    ErrorResponse:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string

    Instructor:
      type: object
      properties:
        id: 
          type: string
        courseId:
          type: string
        userId:
          type: string
        can_create_content:
          type: boolean
        can_grade:
          type: boolean
        can_update_course:
          type: boolean
    
    UpdateCourseRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        shortDescription:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        instructor:
          $ref: '#/components/schemas/Instructor'
        capacity:
          type: integer
        enrolled:
          type: integer
        category:
          type: string
        level:
          type: string
        modality:
          type: string
        prerequisites:
          type: array
          items:
            type: string
        isEnrrolled:
          type: boolean
        imageUrl:
          type: string

    CreateModuleRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        url:
          type: string
        order:
          type: number
        courseId:
          type: string
          
    CreateResourceRequest:
      type: object
      properties:
        description:
          type: string
        type:
          type: string
        url:
          type: string
        order:
          type: number
        moduleId:
          type: string

    Resource:
      type: object
      properties:
        id:
          type: string
        description:
          type: string
        type:
          type: string
        url:
          type: string
        order:
          type: number
        moduleId:
          type: string

    Module:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        url:
          type: string
        order:
          type: number
        courseId:
          type: string

    Enrollment:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        courseId:
          type: string
        enrollmentDate:
          type: string
      
    CreateEnrollmentRequest:
      type: object
      properties:
        userId:
          type: string

    InstructorType:
      type: string
      enum:
        - TITULAR
        - AUXILIAR
      example: AUXILIAR

    TaskSummary:
      type: object
      properties:
        id:
          type: string
          example: "t1"
        title:
          type: string
          example: "Primer tarea"
        course:
          type: object
          properties:
            name:
              type: string
              example: "Curso de JavaScript"
        due_date:
          type: string
          format: date-time
          example: "2025-06-19T21:12:52.732Z"
        published:
          type: boolean
          example: true
        type:
          type: string
          example: "tarea"
        _count:
          type: object
          properties:
            submissions:
              type: integer
              example: 1

    CreateTaskRequest:
      type: object
      required:
        - type
        - title
        - description
        - due_date
        - allow_late
        - late_policy
        - has_timer
        - published
        - allow_file_upload
        - answer_format
      properties:
        type:
          type: string
          enum: [tarea, examen]
        title:
          type: string
        description:
          type: string
        file_url:
          type: string
          nullable: true
        due_date:
          type: string
          format: date-time
        allow_late:
          type: boolean
        late_policy:
          type: string
          enum: [ninguna, descontar, penalizar, aceptar, aceptar_con_descuento, aceptar_con_penalizacion]
        has_timer:
          type: boolean
        time_limit_minutes:
          type: integer
          nullable: true
        published:
          type: boolean
        visible_from:
          type: string
          format: date-time
          nullable: true
        visible_until:
          type: string
          format: date-time
          nullable: true
        allow_file_upload:
          type: boolean
        answer_format:
          type: string
          enum: [preguntas_respuestas, archivo]
        questions:
          type: array
          items:
            $ref: '#/components/schemas/TaskQuestion'

    TaskQuestion:
      type: object
      required:
        - text
      properties:
        text:
          type: string
        points:
          type: number
          nullable: true

    Task:
      allOf:
        - $ref: '#/components/schemas/CreateTaskRequest'
        - type: object
          properties:
            id:
              type: string
            course_id:
              type: string
            created_by:
              type: string
            created_at:
              type: string
              format: date-time
            updated_at:
              type: string
              format: date-time
              nullable: true
            deleted_at:
              type: string
              format: date-time
              nullable: true

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT